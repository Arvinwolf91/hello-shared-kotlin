apply plugin: 'kotlin'

repositories {
    mavenCentral()
    maven { url 'https://rekotlin.s3-ap-southeast-1.amazonaws.com/snapshots' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"
}

apply plugin: 'konan'

konan.targets = ['iphone', 'iphone_sim']

def frameworkName = 'KotlinHello'

konanArtifacts {
    framework(frameworkName) {
        if (System.getenv("CONFIGURATION") == "Release") {
            extraOpts '--embed_bitcode'
        } else {
            extraOpts '--embed_bitcode_marker'
        }
    }
}

task lipo(type: Exec, dependsOn: 'build') {
    def frameworks = files(
            "$buildDir/konan/bin/ios_arm64/${frameworkName}.framework/$frameworkName",
            "$buildDir/konan/bin/ios_x64/${frameworkName}.framework/$frameworkName"
    )
    def output = file("$buildDir/konan/bin/ios_universal/${frameworkName}.framework/$frameworkName")
    inputs.files frameworks
    outputs.file output
    executable = 'lipo'
    args = frameworks.files
    args += ['-create', '-output', output]
}

task genConstants() {
    def output = file("${rootProject.rootDir}/ios/Hello Shared Kotlin/Constants.swift")
    inputs.property("firebase_enabled", firebase_enabled)
    outputs.file output
    doLast {
        output.write("let firebaseEnabled = $firebase_enabled")
    }
}

task copyFramework(type: Copy, dependsOn: [lipo, genConstants]) {
    from("$buildDir/konan/bin/ios_arm64") {
        include '*/Headers/*'
        include '*/Modules/*'
        include '*/Info.plist'
    }
    from "$buildDir/konan/bin/ios_universal"
    into "${rootProject.rootDir}/ios"
}

